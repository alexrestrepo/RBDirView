#tag ClassProtected Class DirViewListInherits Listbox	#tag Event		Function CellBackgroundPaint(g As Graphics, row As Integer, column As Integer) As Boolean		  //fill the selected column with a light gray		  if column=lastPressedHeader then		    g.foreColor=&cEFEFEF		    g.fillrect 0,0,g.width,g.height		  end if		End Function	#tag EndEvent	#tag Event		Sub Change()		  dim fi as folderItem		  if me.listindex<0 then return		  fi=me.cellTag(me.listindex,0)		  		  itemClicked fi		  Change		End Sub	#tag EndEvent	#tag Event		Sub DoubleClick()		  if me.listindex<0 then return		  dim fi as folderItem		  		  me.expanded(me.listindex)=not me.expanded(me.listindex)		  fi=me.cellTag(me.listindex,0)		  		  itemDoubleClicked fi		  DoubleClick		End Sub	#tag EndEvent	#tag Event		Sub ExpandRow(row As Integer)		  //scan a child directory...		  dim fi as folderitem		  me.cell(row,0)=me.cell(row,0)+" (...)"		  fi=me.cellTag(row,0)		  		  scan(fi)		  me.cell(row,0)=replaceall(me.cell(row,0)," (...)","")		End Sub	#tag EndEvent	#tag Event		Function HeaderPressed(column as Integer) As Boolean		  lastPressedHeader=column		End Function	#tag EndEvent	#tag Event		Function KeyDown(Key As String) As Boolean		  //find an item		  dim fi as folderItem		  		  dim i as integer		  if(ticks-lastKeyPressedAt<30) then		    lastkeyPressed=lastkeyPressed+key		  else		    lastkeyPressed=key		  end if		  lastKeyPressedAt=ticks		  listIndex=-1		  		  for i = 0 to listcount-1		    if(lowercase(left(list(i),len(lastKeyPressed)))=Lowercase(lastKeyPressed)) then		      listindex=i		      exit		    end if		  next		  		  if asc(key)=8 or asc(key)=127 and me.listindex>=0 then		    fi=me.cellTag(me.listIndex,0)		    if shouldRemoveItem(fi) then		      me.removeRow me.listindex		    end if		    return true		  end if		End Function	#tag EndEvent	#tag Event		Sub Open()		  me.hierarchical=true		  me.heading(0)="Name"		  		  if me.columncount>1 then		    me.heading(1)="Size"		    me.column(0).minWidthExpression="50%"		    me.column(0).WidthExpression="80%"		    		    me.column(1).minWidthExpression="20%"		  end if		  		  lastPressedHeader=-1		  		  Open		End Sub	#tag EndEvent	#tag Method, Flags = &h1		Protected Sub addDir(fi as folderItem)		  if not fi.directory then return		  		  me.addfolder fi.name		  if displayFinderIcons then 		    #if hasMBS then		      me.rowPicture(me.lastIndex)=fi.iconMBS(16)		    #else		      me.rowPicture(me.lastIndex)=dirIcon		    #endif		  end if		  me.celltag(me.lastindex,0)=fi		  me.cell(me.lastindex,1)=str(fi.count)+" items"		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub addItem(fi as folderItem)		  me.addrow fi.name		  		  if displayFinderIcons then 		    #if hasMBS then		      me.rowPicture(me.lastIndex)=fi.iconMBS(16)		    #else		      me.rowPicture(me.lastIndex)=docIcon		    #endif		  end if		  		  me.celltag(me.lastindex,0)=fi		  me.cell(me.lastindex,1)=format(fi.length/1000,"#.#")+" K"		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function dirIcon() As picture		  if _dirIcon=nil then		    _dirIcon=newpicture(16,16,32)		    _dirIcon.mask.graphics.drawPicture dirMask,0,0		    _dirIcon.graphics.drawPicture dir,0,0		  end if		  		  return _dirIcon		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function docIcon() As picture		  if _docIcon=nil then		    _docIcon=newpicture(16,16,32)		    _docIcon.mask.graphics.drawPicture docMask,0,0		    _docIcon.graphics.drawPicture doc,0,0		  end if		  		  return _docIcon		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub scan(dir as folderItem)		  dim i,cnt as integer		  dim stamp as double		  dim key as string		  		  if dir.directory then		    cnt=dir.count		    for i=1 to cnt		      if dir.item(i).directory then		        addDir(dir.item(i))		      elseif dir.item(i).visible then		        addItem(dir.item(i))		      end if		      if ticks>lastTicks+180 then		        app.doevents		        lastTicks=ticks		      end if		    next		  elseif dir.visible then		    addItem(dir)		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub scanDir(dir as folderItem)		  if dir=nil then return		  baseDir=dir		  me.deleteAllRows		  		  if dir.directory then		    addDir(dir)		  else		    me.addrow dir.name		  end if		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event Change()	#tag EndHook	#tag Hook, Flags = &h0		Event DoubleClick()	#tag EndHook	#tag Hook, Flags = &h0		Event itemClicked(fi as folderItem)	#tag EndHook	#tag Hook, Flags = &h0		Event itemDoubleClicked(fi as folderItem)	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Hook, Flags = &h0		Event shouldRemoveItem(fi as folderItem) As boolean	#tag EndHook	#tag Note, Name = Info				DirViewList		By Alex Restrepo		send comments, suggestions, fixes to alexrestrepo@mac.com				To view the contents of a directory just call		ScanDir(folderItem)				requires the MonkeyBread plugin to display the actual finder Icons, then set the constant hasMBS to true				Use in whatever way you like... at your own risk :P		let me know if you find it useful.					#tag EndNote	#tag Property, Flags = &h1		Protected baseDir As folderItem	#tag EndProperty	#tag Property, Flags = &h4		displayFinderIcons As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected lastKeyPressed As string	#tag EndProperty	#tag Property, Flags = &h1		Protected lastKeyPressedAt As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected lastPressedHeader As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected lastTicks As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected _dirIcon As picture	#tag EndProperty	#tag Property, Flags = &h1		Protected _docIcon As picture	#tag EndProperty	#tag Constant, Name = hasMBS, Type = Boolean, Dynamic = False, Default = \"false", Scope = Protected	#tag EndConstantEnd Class#tag EndClass